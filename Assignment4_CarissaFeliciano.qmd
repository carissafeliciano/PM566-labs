---
title: "Assignment 04"
author: "Carissa Feliciano"
format: html
embed-resources: true
---

# HPC
## Make things run faster
Rewrite the following R functions to make them faster
```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}
```

```{r}
# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  t(apply(mat, 1, cumsum))
}
```

## Question 1
Using the dataset generated below (dat), check that the output of both of your new functions matches the output of the original functions. Then use microbenchmark to check that your version is actually faster.
```{r}
library(DT)

# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

fun1_test <- fun1(dat)
fun1alt_test <- fun1alt(dat)

fun2_test <- fun2(dat)
fun2alt_test <- fun2alt(dat)

head(fun1_test)
head(fun1alt_test)
datatable(head(fun2_test, n = 2))
datatable(head(fun2alt_test, n = 2))

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```
The output matches. My version is faster. 

## Make things run faster with parallel computing
```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132

# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

## Question 2
Rewrite the previous code using parLapply() (or your parallelization method of choice) to parallelize it. Run the code once, using system.time(), to show that your version is faster.
```{r}
library(parallel)
cl <- makeCluster(4)
clusterExport(cl, varlist = c("sim_pi"))

set.seed(1231)
system.time({
  ans <- unlist(parLapply(cl, 1:4000, function(i) sim_pi(n = 10000)))
  stopCluster(cl)
  print(mean(ans))
})
```

This version is faster

# SQL 
Set up a temporary database 
```{r}
# install.packages(c("RSQLite", "DBI"))

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

## Question 3
How many movies are available in each rating category?
```{sql, connection=con}
SELECT rating,
  COUNT(*) AS count
FROM film
GROUP By rating
```

## Question 4
What is the average replacement cost and rental rate for each rating category?
```{sql, connection=con}
SELECT rating,
  AVG(rental_rate) AS avg_rental_rate,
  AVG(replacement_cost) AS avg_replacement_cost
FROM film
GROUP BY rating
```
## Question 5
Use table film_category together with film to find how many films there are with each category ID.
```{sql, connection=con}
SELECT category_id,
  COUNT(*) AS count
FROM film AS a LEFT JOIN film_category AS b
  ON a.film_id = b.film_id 
GROUP BY category_id
```

## Question 6
Incorporate the category table into the answer to the previous question to find the name of the most popular category.
```{sql, connection=con}
SELECT b.category_id, c.name,
  COUNT(*) AS count
FROM film AS a 
LEFT JOIN film_category AS b
  ON a.film_id = b.film_id 
LEFT JOIN category AS c
  ON b.category_id = c.category_id
GROUP BY b.category_id
ORDER BY count DESC
```
The most popular category is sports.
